# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

parameters:
- name: 'SERVICECONN'
  displayName: 'Select the service connection related to the env.'
  type: string
  default: 'AWS Uat'
  values:
    - 'AWS Uat'
    - 'AWS Prod'
- name: tags
  type: object
  default:
  - latest
  - $(tag)

variables:
  - name: tag 
    value: '$(Build.BuildId)'
  - name: ecrName
    ${{ if eq( parameters['SERVICECONN'], 'AWS Uat') }}:
      value: pdv-u-poc
    ${{ if eq( parameters['SERVICECONN'], 'AWS Prod') }}:
      value: pdv-p-poc
  - name: clusterName
    ${{ if eq( parameters['SERVICECONN'], 'AWS Uat') }}:
      value: pdv-u-ecs-cluster
    ${{ if eq( parameters['SERVICECONN'], 'AWS Prod') }}:
      value: pdv-p-ecs-cluster
  - name: serviceName
    ${{ if eq( parameters['SERVICECONN'], 'AWS Uat') }}:
      value: pdv-u-service-poc
    ${{ if eq( parameters['SERVICECONN'], 'AWS Prod') }}:
      value: pdv-p-service-poc

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/src/webapp/Dockerfile'
        repository: $(DOCKER_IMAGE)
        tags: |
          $(tag)
          latest
    - ${{ each tag in parameters.tags }}:
      - task: ECRPushImage@1
        displayName: Push tag $(DOCKER_IMAGE) :${{ tag }}
        inputs:
          awsCredentials: ${{ parameters.SERVICECONN}}
          regionName: 'eu-south-1'
          imageSource: 'imagename'
          sourceImageName: $(DOCKER_IMAGE)
          pushTag: ${{ tag }}
          repositoryName: '$(ecrName)'
    - task: AWSCLI@1
      inputs:
        awsCredentials: ${{ parameters.SERVICECONN}}
        regionName: 'eu-south-1'
        awsCommand: 'ecs'
        awsSubCommand: 'update-service'
        awsArguments: '--cluster $(clusterName) --service $(serviceName) --force-new-deployment'
